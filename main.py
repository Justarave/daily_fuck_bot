import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode

TOKEN = "7576891927:AAFG_PZfzyV93lOtjLTmOPfludJGZmkrmZI"

# –†–µ–∂–∏–º—ã –¥–Ω—è –∏ –∏—Ö —à–∞–≥–∏
day_modes = {
    "–ï–±–∞—à–∏–º üõ†": [
        "–ü—Ä–∏–º–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ë–ê–î—ã",
        "–ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–π",
        "–ü—Ä–æ–≥—É–ª–∫–∞ 15 –º–∏–Ω—É—Ç",
        "–ü—Ä–∏–º–∏ –¥—É—à",
        "–ú–µ–¥–∏—Ç–∞—Ü–∏—è, —á—Ç–µ–Ω–∏–µ, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
        "–†–∞–±–æ—Ç–∞",
        "–í—Ç–æ—Ä–æ–π –∑–∞–≤—Ç—Ä–∞–∫",
        "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)",
        "–†–∞–±–æ—Ç–∞",
        "–ü–æ–ª–¥–Ω–∏–∫",
        "–†–∞–±–æ—Ç–∞",
        "–£–∂–∏–Ω (–∏ –≤–µ—á–µ—Ä–Ω–∏–µ –ë–ê–î—ã)",
        "–†–∞–±–æ—Ç–∞",
        "–î—É—à –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        "–°–æ–Ω"
    ],
    "–†–∞—Å—Å–ª–∞–±–æ–Ω üèñ": [
        "–ü—Ä–∏–º–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ë–ê–î—ã",
        "–ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–π",
        "–ü—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω—É—Ç",
        "–ü—Ä–∏–º–∏ –¥—É—à",
        "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏",
        "–û—Ç–¥—ã—Ö / –•–æ–±–±–∏",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ª—ë–≥–∫–∞—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
        "–û–±–µ–¥",
        "–ö–∏–Ω–æ / –ü—Ä–æ–≥—É–ª–∫–∞",
        "–£–∂–∏–Ω",
        "–°–æ–Ω"
    ],
    "–ö–∞—á–∞–µ–º –±–∞–Ω–∫—É üèãÔ∏è": [
        "–ü—Ä–∏–º–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ë–ê–î—ã",
        "–ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–π",
        "–†–∞–∑–º–∏–Ω–∫–∞",
        "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª",
        "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∫—É—Å",
        "–î—É—à / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "–û–±–µ–¥",
        "–†–∞—Å—Ç—è–∂–∫–∞",
        "–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞",
        "–£–∂–∏–Ω",
        "–°–æ–Ω –∏ –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    ]
}

# –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_steps = {}
user_mode = {}
progress = {}
training_progress = {}

bot = Bot(TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è")]
], resize_keyboard=True)

mode_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ï–±–∞—à–∏–º üõ†")],
    [KeyboardButton(text="–†–∞—Å—Å–ª–∞–±–æ–Ω üèñ")],
    [KeyboardButton(text="–ö–∞—á–∞–µ–º –±–∞–Ω–∫—É üèãÔ∏è")]
], resize_keyboard=True)

action_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–°–¥–µ–ª–∞–ª"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏–ª")]
], resize_keyboard=True)

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ '–Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å!", reply_markup=start_kb)

@dp.message(lambda message: message.text == "–Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è")
async def wake_up(message: types.Message):
    user_steps[message.from_user.id] = 0
    progress[message.from_user.id] = {"done": 0, "skipped": 0}
    await check_new_week(message.from_user.id)
    await morning_motivation(message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –¥–Ω—è:", reply_markup=mode_kb)

@dp.message(lambda message: message.text in day_modes.keys())
async def choose_mode(message: types.Message):
    user_mode[message.from_user.id] = message.text
    await send_next_step(message.from_user.id)

async def send_next_step(user_id):
    if user_id not in user_steps or user_id not in user_mode:
        return
    step = user_steps[user_id]
    mode = user_mode[user_id]
    steps_list = day_modes.get(mode, [])
    if step < len(steps_list):
        await bot.send_message(user_id, f"–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: *{steps_list[step]}*", parse_mode=ParseMode.MARKDOWN, reply_markup=action_kb)
        asyncio.create_task(reminder_loop(user_id, step))
    else:
        await show_day_summary(user_id)
        await bot.send_message(user_id, "–ö—Ä–∞—Å–∞–≤—á–∏–∫, –æ—Ç–¥—ã—Ö–∞–π (: ", reply_markup=start_kb)
        del user_steps[user_id]
        del user_mode[user_id]

@dp.message(lambda message: message.text in ["–°–¥–µ–ª–∞–ª", "–ü—Ä–æ–ø—É—Å—Ç–∏–ª"])
async def completed_step(message: types.Message):
    if message.from_user.id in user_steps:
        if message.text == "–°–¥–µ–ª–∞–ª":
            progress[message.from_user.id]["done"] += 1
            mode = user_mode.get(message.from_user.id)
            steps_list = day_modes.get(mode, [])
            if "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª" in steps_list[user_steps[message.from_user.id]]:
                await increment_training(message.from_user.id)
        else:
            progress[message.from_user.id]["skipped"] += 1
        user_steps[message.from_user.id] += 1
        await send_next_step(message.from_user.id)

async def reminder_loop(user_id, step):
    for _ in range(4):
        await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç
        if user_steps.get(user_id) == step:
            await bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –¢—ã –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏–µ!", reply_markup=action_kb)
        else:
            break

async def show_day_summary(user_id):
    done = progress.get(user_id, {}).get("done", 0)
    skipped = progress.get(user_id, {}).get("skipped", 0)
    total = done + skipped
    percent = (done / total) * 100 if total > 0 else 0
    await bot.send_message(user_id, f"*–ò—Ç–æ–≥–∏ –¥–Ω—è:*\n–°–¥–µ–ª–∞–Ω–æ: {done}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {percent:.0f}%", parse_mode=ParseMode.MARKDOWN)

async def increment_training(user_id):
    today = datetime.now()
    week = today.isocalendar().week
    if user_id not in training_progress or training_progress[user_id]["week"] != week:
        training_progress[user_id] = {"week": week, "done": 0}
    training_progress[user_id]["done"] += 1

@dp.message(Command("—Å—Ç–∞—Ç—É—Å"))
async def training_status(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now()
    week = today.isocalendar().week
    if user_id not in training_progress or training_progress[user_id]["week"] != week:
        training_progress[user_id] = {"week": week, "done": 0}
    done = training_progress[user_id]["done"]
    if done >= 3:
        await message.answer("–ö—Ä–∞—Å–∞–≤—á–∏–∫ :3")
    else:
        await message.answer(f"–ï—â—ë —á—É—Ç–∫–∞, –∑–∞–µ–±–∞–ª )\n–°–¥–µ–ª–∞–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {done}/3")

async def morning_motivation(user_id):
    today = datetime.now()
    if today.weekday() == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        await bot.send_message(user_id, "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π! –ï–±–∞—à—å, —Å–∫–æ—Ä–æ 26 :—Å")

async def check_new_week(user_id):
    today = datetime.now()
    week = today.isocalendar().week
    if user_id not in training_progress or training_progress[user_id]["week"] != week:
        training_progress[user_id] = {"week": week, "done": 0}
    if today.weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        done = training_progress[user_id]["done"]
        if done >= 3:
            await bot.send_message(user_id, "–ö—Ä–∞—Å–∞–≤—á–∏–∫ :3")
        else:
            await bot.send_message(user_id, "–•—É–ª–∏ –ª–µ–Ω–∏–º—Å—è? –ë–µ–∑ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
